        -:    0:Source:testme.c
        -:    0:Graph:testme.gcno
        -:    0:Data:testme.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include<stdio.h>
        -:    2:#include<string.h>
        -:    3:#include<stdlib.h>
        -:    4:#include<time.h>
        -:    5:
function inputChar called 11928 returned 100% blocks executed 100%
    11928:    6:char inputChar()
        -:    7:{
        -:    8:    char output;
    11928:    9:    output = "[({ ax})]rest\0"[rand() % 13]; 
call    0 returned 100%
    11928:   10:    return output;
        -:   11:}
        -:   12:
function inputString called 11928 returned 100% blocks executed 100%
    11928:   13:char *inputString()
        -:   14:{
    11928:   15:    char* string = malloc(6);
    83496:   16:    for(int i = 0; i <= 5; i++){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
    71568:   17:      string[i] = "rest\0"[rand() % 5]; 
call    0 returned 100%
        -:   18:    }
        -:   19:
    11928:   20:    return string;
        -:   21:}
        -:   22:
function testme called 1 returned 0% blocks executed 100%
        1:   23:void testme()
        -:   24:{
        1:   25:  int tcCount = 0;
        -:   26:  char *s;
        -:   27:  char c;
        1:   28:  int state = 0;
        -:   29:  while (1)
        -:   30:  {
    11928:   31:    tcCount++;
    11928:   32:    c = inputChar();
call    0 returned 100%
    11928:   33:    s = inputString();
call    0 returned 100%
    11928:   34:    printf("Iteration %d: c = %c, s = %s, state = %d\n", tcCount, c, s, state);
call    0 returned 100%
        -:   35:
    11928:   36:    if (c == '[' && state == 0) state = 1;
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    11928:   37:    if (c == '(' && state == 1) state = 2;
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    11928:   38:    if (c == '{' && state == 2) state = 3;
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    11928:   39:    if (c == ' '&& state == 3) state = 4;
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    11928:   40:    if (c == 'a' && state == 4) state = 5;
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    11928:   41:    if (c == 'x' && state == 5) state = 6;
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    11928:   42:    if (c == '}' && state == 6) state = 7;
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    11928:   43:    if (c == ')' && state == 7) state = 8;
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    11928:   44:    if (c == ']' && state == 8) state = 9;
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    11928:   45:    if (s[0] == 'r' && s[1] == 'e'
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 21% (fallthrough)
branch  3 taken 79%
      499:   46:       && s[2] == 's' && s[3] == 'e'
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
branch  2 taken 21% (fallthrough)
branch  3 taken 79%
       23:   47:       && s[4] == 't' && s[5] == '\0'
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
branch  2 taken 17% (fallthrough)
branch  3 taken 83%
        1:   48:       && state == 9)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   49:    {
        1:   50:      printf("error ");
call    0 returned 100%
        1:   51:      exit(200);
call    0 returned 0%
        -:   52:    }
    11927:   53:    free(s);
    11927:   54:  }
        -:   55:}
        -:   56:
        -:   57:
function main called 1 returned 0% blocks executed 80%
        1:   58:int main(int argc, char *argv[])
        -:   59:{
        1:   60:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   61:    testme();
call    0 returned 0%
    #####:   62:    return 0;
        -:   63:}
